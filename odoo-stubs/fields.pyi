import datetime
from typing import Any, Optional

from odoo.tools import date_utils

DATE_LENGTH: Any
DATETIME_LENGTH: Any
NO_ACCESS: str
IR_MODELS: Any
_logger: Any
_schema: Any
Default: Any

def first(records: Any): ...
def resolve_mro(model: Any, name: Any, predicate: Any): ...

class MetaField(type):
    by_type: Any = ...
    def __init__(cls, name: Any, bases: Any, attrs: Any) -> None: ...

_global_seq: Any

class Field(MetaField('DummyField', (object,), {})):
    type: Any = ...
    relational: bool = ...
    translate: bool = ...
    column_type: Any = ...
    column_format: str = ...
    column_cast_from: Any = ...
    args: Any = ...
    _module: Any = ...
    _modules: Any = ...
    _setup_done: Any = ...
    _sequence: Any = ...
    automatic: bool = ...
    inherited: bool = ...
    inherited_field: Any = ...
    name: Any = ...
    model_name: Any = ...
    comodel_name: Any = ...
    store: bool = ...
    index: bool = ...
    manual: bool = ...
    copy: bool = ...
    _depends: Any = ...
    _depends_context: Any = ...
    recursive: bool = ...
    compute: Any = ...
    compute_sudo: bool = ...
    inverse: Any = ...
    search: Any = ...
    related: Any = ...
    company_dependent: bool = ...
    default: Any = ...
    string: Any = ...
    help: Any = ...
    invisible: bool = ...
    readonly: bool = ...
    required: bool = ...
    states: Any = ...
    groups: Any = ...
    change_default: bool = ...
    deprecated: Any = ...
    related_field: Any = ...
    group_operator: Any = ...
    group_expand: Any = ...
    prefetch: bool = ...
    def __init__(self, string: Any = ..., **kwargs: Any) -> None: ...
    def new(self, **kwargs: Any): ...
    def __str__(self): ...
    def __repr__(self): ...
    def setup_base(self, model: Any, name: Any) -> None: ...
    def _can_setup_from(self, field: Any): ...
    def _get_attrs(self, model: Any, name: Any): ...
    def _setup_attrs(self, model: Any, name: Any): ...
    def setup_full(self, model: Any) -> None: ...
    def _setup_regular_base(self, model: Any) -> None: ...
    depends: Any = ...
    depends_context: Any = ...
    def _setup_regular_full(self, model: Any) -> None: ...
    def _setup_related_full(self, model: Any) -> None: ...
    def traverse_related(self, record: Any): ...
    def _compute_related(self, records: Any) -> None: ...
    def _process_related(self, value: Any): ...
    def _inverse_related(self, records: Any) -> None: ...
    def _search_related(self, records: Any, operator: Any, value: Any): ...
    _related_comodel_name: Any = ...
    _related_string: Any = ...
    _related_help: Any = ...
    _related_groups: Any = ...
    _related_group_operator: Any = ...
    @property
    def base_field(self): ...
    def _default_company_dependent(self, model: Any): ...
    def _compute_company_dependent(self, records: Any) -> None: ...
    def _inverse_company_dependent(self, records: Any) -> None: ...
    def _search_company_dependent(self, records: Any, operator: Any, value: Any): ...
    def resolve_depends(self, registry: Any) -> None: ...
    def get_description(self, env: Any): ...
    _description_store: Any = ...
    _description_manual: Any = ...
    _description_depends: Any = ...
    _description_related: Any = ...
    _description_company_dependent: Any = ...
    _description_readonly: Any = ...
    _description_required: Any = ...
    _description_states: Any = ...
    _description_groups: Any = ...
    _description_change_default: Any = ...
    _description_deprecated: Any = ...
    _description_group_operator: Any = ...
    @property
    def _description_searchable(self): ...
    @property
    def _description_sortable(self): ...
    def _description_string(self, env: Any): ...
    def _description_help(self, env: Any): ...
    def is_editable(self): ...
    def null(self, record: Any): ...
    def convert_to_column(self, value: Any, record: Any, values: Optional[Any] = ..., validate: bool = ...): ...
    def convert_to_cache(self, value: Any, record: Any, validate: bool = ...): ...
    def convert_to_record(self, value: Any, record: Any): ...
    def convert_to_record_multi(self, values: Any, records: Any): ...
    def convert_to_read(self, value: Any, record: Any, use_name_get: bool = ...): ...
    def convert_to_write(self, value: Any, record: Any): ...
    def convert_to_onchange(self, value: Any, record: Any, names: Any): ...
    def convert_to_export(self, value: Any, record: Any): ...
    def convert_to_display_name(self, value: Any, record: Any): ...
    def update_db(self, model: Any, columns: Any): ...
    def update_db_column(self, model: Any, column: Any) -> None: ...
    def update_db_notnull(self, model: Any, column: Any) -> None: ...
    def read(self, records: Any) -> None: ...
    def create(self, record_values: Any) -> None: ...
    def write(self, records: Any, value: Any): ...
    # def __get__(self, record: Any, owner: Any): ...
    def mapped(self, records: Any): ...
    def __set__(self, records: Any, value: Any): ...
    def compute_value(self, records: Any) -> None: ...
    def determine_inverse(self, records: Any) -> None: ...
    def determine_domain(self, records: Any, operator: Any, value: Any): ...

class Boolean(Field):
    type: str = ...
    column_type: Any = ...
    def convert_to_column(self, value: Any, record: Any, values: Optional[Any] = ..., validate: bool = ...): ...
    def convert_to_cache(self, value: Any, record: Any, validate: bool = ...): ...
    def convert_to_export(self, value: Any, record: Any): ...

class Integer(Field):
    type: str = ...
    column_type: Any = ...
    group_operator: str = ...
    def convert_to_column(self, value: Any, record: Any, values: Optional[Any] = ..., validate: bool = ...): ...
    def convert_to_cache(self, value: Any, record: Any, validate: bool = ...): ...
    def convert_to_record(self, value: Any, record: Any): ...
    def convert_to_read(self, value: Any, record: Any, use_name_get: bool = ...): ...
    def _update(self, records: Any, value: Any) -> None: ...
    def convert_to_export(self, value: Any, record: Any): ...

class Float(Field):
    type: str = ...
    column_cast_from: Any = ...
    _digits: Any = ...
    group_operator: str = ...
    def __init__(self, string: Any = ..., digits: Any = ..., **kwargs: Any) -> None: ...
    @property
    def column_type(self): ...
    def get_digits(self, env: Any): ...
    _related__digits: Any = ...
    def _description_digits(self, env: Any): ...
    def convert_to_column(self, value: Any, record: Any, values: Optional[Any] = ..., validate: bool = ...): ...
    def convert_to_cache(self, value: Any, record: Any, validate: bool = ...): ...
    def convert_to_record(self, value: Any, record: Any): ...
    def convert_to_export(self, value: Any, record: Any): ...
    round: Any = ...
    is_zero: Any = ...
    compare: Any = ...

class Monetary(Field):
    type: str = ...
    column_type: Any = ...
    column_cast_from: Any = ...
    currency_field: Any = ...
    group_operator: str = ...
    def __init__(self, string: Any = ..., currency_field: Any = ..., **kwargs: Any) -> None: ...
    _description_currency_field: Any = ...
    def _setup_currency_field(self, model: Any) -> None: ...
    def _setup_regular_full(self, model: Any) -> None: ...
    def _setup_related_full(self, model: Any) -> None: ...
    def convert_to_column(self, value: Any, record: Any, values: Optional[Any] = ..., validate: bool = ...): ...
    def convert_to_cache(self, value: Any, record: Any, validate: bool = ...): ...
    def convert_to_record(self, value: Any, record: Any): ...
    def convert_to_read(self, value: Any, record: Any, use_name_get: bool = ...): ...
    def convert_to_write(self, value: Any, record: Any): ...

class _String(Field):
    translate: bool = ...
    prefetch: Any = ...
    def __init__(self, string: Any = ..., **kwargs: Any) -> None: ...
    def _setup_attrs(self, model: Any, name: Any) -> None: ...
    _related_translate: Any = ...
    def _description_translate(self, env: Any): ...
    def get_trans_terms(self, value: Any): ...
    def get_trans_func(self, records: Any): ...
    def check_trans_value(self, value: Any): ...
    def write(self, records: Any, value: Any): ...

class Char(_String):
    type: str = ...
    column_cast_from: Any = ...
    size: Any = ...
    trim: bool = ...
    @property
    def column_type(self): ...
    def update_db_column(self, model: Any, column: Any) -> None: ...
    _related_size: Any = ...
    _related_trim: Any = ...
    _description_size: Any = ...
    _description_trim: Any = ...
    def _setup_regular_base(self, model: Any) -> None: ...
    def convert_to_column(self, value: Any, record: Any, values: Optional[Any] = ..., validate: bool = ...): ...
    def convert_to_cache(self, value: Any, record: Any, validate: bool = ...): ...

class Text(_String):
    type: str = ...
    column_type: Any = ...
    column_cast_from: Any = ...
    def convert_to_cache(self, value: Any, record: Any, validate: bool = ...): ...

class Html(_String):
    type: str = ...
    column_type: Any = ...
    sanitize: bool = ...
    sanitize_tags: bool = ...
    sanitize_attributes: bool = ...
    sanitize_style: bool = ...
    sanitize_form: bool = ...
    strip_style: bool = ...
    strip_classes: bool = ...
    def _get_attrs(self, model: Any, name: Any): ...
    _related_sanitize: Any = ...
    _related_sanitize_tags: Any = ...
    _related_sanitize_attributes: Any = ...
    _related_sanitize_style: Any = ...
    _related_strip_style: Any = ...
    _related_strip_classes: Any = ...
    _description_sanitize: Any = ...
    _description_sanitize_tags: Any = ...
    _description_sanitize_attributes: Any = ...
    _description_sanitize_style: Any = ...
    _description_strip_style: Any = ...
    _description_strip_classes: Any = ...
    def convert_to_column(self, value: Any, record: Any, values: Optional[Any] = ..., validate: bool = ...): ...
    def convert_to_cache(self, value: Any, record: Any, validate: bool = ...): ...

class Date(Field):
    type: str = ...
    column_type: Any = ...
    column_cast_from: Any = ...
    start_of = date_utils.start_of
    end_of = date_utils.end_of
    add: date_utils.add
    subtract: date_utils.subtract
    @staticmethod
    def today(*args: Any) -> datetime.date: ...
    @staticmethod
    def context_today(record: Any, timestamp: Optional[Any] = ...) -> datetime.date: ...
    @staticmethod
    def to_date(value: Any) -> datetime.date: ...
    from_string = to_date
    @staticmethod
    def to_string(value: Any): ...
    def convert_to_cache(self, value: Any, record: Any, validate: bool = ...): ...
    def convert_to_export(self, value: Any, record: Any): ...

class Datetime(Field):
    type: str = ...
    column_type: Any = ...
    column_cast_from: Any = ...
    start_of = date_utils.start_of
    end_of = date_utils.end_of
    add = date_utils.add
    subtract: date_utils.subtract
    @staticmethod
    def now(*args: Any) -> datetime.datetime: ...
    @staticmethod
    def today(*args: Any) -> datetime.datetime: ...
    @staticmethod
    def context_timestamp(record: Any, timestamp: Any) -> datetime.datetime: ...
    @staticmethod
    def to_datetime(value: Any) -> datetime.datetime: ...
    from_string = to_datetime
    @staticmethod
    def to_string(value: Any) -> str: ...
    def convert_to_cache(self, value: Any, record: Any, validate: bool = ...): ...
    def convert_to_export(self, value: Any, record: Any): ...
    def convert_to_display_name(self, value: Any, record: Any): ...
_BINARY = memoryview

class Binary(Field):
    type: str = ...
    prefetch: bool = ...
    _depends_context: Any = ...
    attachment: bool = ...
    @property
    def column_type(self): ...
    def _get_attrs(self, model: Any, name: Any): ...
    _description_attachment: Any = ...
    def convert_to_column(self, value: Any, record: Any, values: Optional[Any] = ..., validate: bool = ...): ...
    def convert_to_cache(self, value: Any, record: Any, validate: bool = ...): ...
    def convert_to_record(self, value: Any, record: Any): ...
    def compute_value(self, records: Any) -> None: ...
    def read(self, records: Any) -> None: ...
    def create(self, record_values: Any) -> None: ...
    def write(self, records: Any, value: Any): ...

class Image(Binary):
    max_width: int = ...
    max_height: int = ...
    verify_resolution: bool = ...
    def create(self, record_values: Any) -> None: ...
    def write(self, records: Any, value: Any) -> None: ...
    def _image_process(self, value: Any): ...
    def _process_related(self, value: Any): ...

class Selection(Field):
    type: str = ...
    column_type: Any = ...
    selection: Any = ...
    validate: bool = ...
    ondelete: Any = ...
    def __init__(self, selection: Any = ..., string: Any = ..., **kwargs: Any) -> None: ...
    def _setup_regular_base(self, model: Any) -> None: ...
    def _setup_related_full(self, model: Any): ...
    def _get_attrs(self, model: Any, name: Any): ...
    def _setup_attrs(self, model: Any, name: Any) -> None: ...
    def _selection_modules(self, model: Any): ...
    def _description_selection(self, env: Any): ...
    def get_values(self, env: Any): ...
    def convert_to_column(self, value: Any, record: Any, values: Optional[Any] = ..., validate: bool = ...): ...
    def convert_to_cache(self, value: Any, record: Any, validate: bool = ...): ...
    def convert_to_export(self, value: Any, record: Any): ...

class Reference(Selection):
    type: str = ...
    @property
    def column_type(self): ...
    def convert_to_column(self, value: Any, record: Any, values: Optional[Any] = ..., validate: bool = ...): ...
    def convert_to_cache(self, value: Any, record: Any, validate: bool = ...): ...
    def convert_to_record(self, value: Any, record: Any): ...
    def convert_to_read(self, value: Any, record: Any, use_name_get: bool = ...): ...
    def convert_to_export(self, value: Any, record: Any): ...
    def convert_to_display_name(self, value: Any, record: Any): ...

class _Relational(Field):
    relational: bool = ...
    domain: Any = ...
    context: Any = ...
    check_company: bool = ...
    def __get__(self, records: Any, owner: Any): ...
    comodel_name: str = ...
    def _setup_regular_base(self, model: Any) -> None: ...
    def get_domain_list(self, model: Any): ...
    @property
    def _related_domain(self): ...
    _related_context: Any = ...
    _description_relation: Any = ...
    _description_context: Any = ...
    def _description_domain(self, env: Any): ...
    def null(self, record: Any): ...

class Many2one(_Relational):
    type: str = ...
    column_type: Any = ...
    ondelete: Any = ...
    auto_join: bool = ...
    delegate: bool = ...
    def __init__(self, comodel_name: Any = ..., string: Any = ..., **kwargs: Any) -> None: ...
    def _setup_attrs(self, model: Any, name: Any) -> None: ...
    def _setup_regular_base(self, model: Any) -> None: ...
    def update_db(self, model: Any, columns: Any): ...
    def update_db_column(self, model: Any, column: Any) -> None: ...
    def update_db_foreign_key(self, model: Any, column: Any) -> None: ...
    def _update(self, records: Any, value: Any) -> None: ...
    def convert_to_column(self, value: Any, record: Any, values: Optional[Any] = ..., validate: bool = ...): ...
    def convert_to_cache(self, value: Any, record: Any, validate: bool = ...): ...
    def convert_to_record(self, value: Any, record: Any): ...
    def convert_to_record_multi(self, values: Any, records: Any): ...
    def convert_to_read(self, value: Any, record: Any, use_name_get: bool = ...): ...
    def convert_to_write(self, value: Any, record: Any): ...
    def convert_to_export(self, value: Any, record: Any): ...
    def convert_to_display_name(self, value: Any, record: Any): ...
    def convert_to_onchange(self, value: Any, record: Any, names: Any): ...
    def write(self, records: Any, value: Any): ...
    def _remove_inverses(self, records: Any, value: Any): ...
    def _update_inverses(self, records: Any, value: Any) -> None: ...

class Many2oneReference(Integer):
    type: str = ...
    model_field: Any = ...
    _related_model_field: Any = ...
    def convert_to_cache(self, value: Any, record: Any, validate: bool = ...): ...
    def _remove_inverses(self, records: Any, value: Any) -> None: ...
    def _update_inverses(self, records: Any, value: Any) -> None: ...
    def _record_ids_per_res_model(self, records: Any): ...

class _RelationalMulti(_Relational):
    def _update(self, records: Any, value: Any): ...
    def convert_to_cache(self, value: Any, record: Any, validate: bool = ...): ...
    def convert_to_record(self, value: Any, record: Any): ...
    def convert_to_record_multi(self, values: Any, records: Any): ...
    def convert_to_read(self, value: Any, record: Any, use_name_get: bool = ...): ...
    def convert_to_write(self, value: Any, record: Any): ...
    def convert_to_export(self, value: Any, record: Any): ...
    def convert_to_display_name(self, value: Any, record: Any) -> None: ...
    depends: Any = ...
    def _setup_regular_full(self, model: Any) -> None: ...
    def create(self, record_values: Any) -> None: ...
    def write(self, records: Any, value: Any): ...
    def write_batch(self, records_commands_list: Any, create: bool = ...): ...

class One2many(_RelationalMulti):
    type: str = ...
    inverse_name: Any = ...
    auto_join: bool = ...
    limit: Any = ...
    copy: bool = ...
    def __init__(self, comodel_name: Any = ..., inverse_name: Any = ..., string: Any = ..., **kwargs: Any) -> None: ...
    def _setup_regular_full(self, model: Any) -> None: ...
    _description_relation_field: Any = ...
    def update_db(self, model: Any, columns: Any) -> None: ...
    def get_domain_list(self, records: Any): ...
    # def __get__(self, records: Any, owner: Any): ...
    def read(self, records: Any): ...
    def write_real(self, records_commands_list: Any, create: bool = ...): ...
    def write_new(self, records_commands_list: Any): ...

class Many2many(_RelationalMulti):
    type: str = ...
    _explicit: bool = ...
    relation: Any = ...
    column1: Any = ...
    column2: Any = ...
    auto_join: bool = ...
    limit: Any = ...
    ondelete: Any = ...
    def __init__(self, comodel_name: Any = ..., relation: Any = ..., column1: Any = ..., column2: Any = ..., string: Any = ..., **kwargs: Any) -> None: ...
    def _setup_regular_base(self, model: Any) -> None: ...
    def _setup_regular_full(self, model: Any) -> None: ...
    def update_db(self, model: Any, columns: Any) -> None: ...
    def update_db_foreign_keys(self, model: Any) -> None: ...
    def read(self, records: Any) -> None: ...
    def write_real(self, records_commands_list: Any, create: bool = ...): ...
    def write_new(self, records_commands_list: Any): ...

class Id(Field):
    type: str = ...
    column_type: Any = ...
    string: str = ...
    store: bool = ...
    readonly: bool = ...
    prefetch: bool = ...
    def update_db(self, model: Any, columns: Any) -> None: ...
    def __get__(self, record: Any, owner: Any): ...
    def __set__(self, record: Any, value: Any) -> None: ...

def prefetch_many2one_ids(record: Any, field: Any): ...
def prefetch_x2many_ids(record: Any, field: Any): ...
def apply_required(model: Any, field_name: Any) -> None: ...
