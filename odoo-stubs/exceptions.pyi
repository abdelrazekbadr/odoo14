from typing import Any, Optional

_logger: Any

class UserError(Exception):
    def __init__(self, message: Any) -> None: ...
    @property
    def name(self): ...

class RedirectWarning(Exception):
    def __init__(self, message: Any, action: Any, button_text: Any, additional_context: Optional[Any] = ...) -> None: ...
    @property
    def name(self): ...

class AccessDenied(UserError):
    __cause__: Any = ...
    traceback: Any = ...
    def __init__(self, message: str = ...) -> None: ...

class AccessError(UserError): ...

class CacheMiss(KeyError):
    def __init__(self, record: Any, field: Any) -> None: ...

class MissingError(UserError): ...
class ValidationError(UserError): ...

class except_orm(UserError):
    def __init__(self, name: Any, value: Optional[Any] = ...) -> None: ...

class Warning(UserError):
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...

class QWebException(Exception):
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...
