import csv
from collections import namedtuple
from typing import Any, Optional

_logger: Any
WEB_TRANSLATION_COMMENT: str
SKIPPED_ELEMENTS: Any
_LOCALE2WIN32: Any
ENGLISH_SMALL_WORDS: Any

class UNIX_LINE_TERMINATOR(csv.excel):
    lineterminator: str = ...

def encode(s: Any): ...

TRANSLATED_ELEMENTS: Any
TRANSLATED_ATTRS: Any
avoid_pattern: Any
node_pattern: Any

def translate_xml_node(node: Any, callback: Any, parse: Any, serialize: Any): ...
def parse_xml(text: Any): ...
def serialize_xml(node: Any): ...

_HTML_PARSER: Any

def parse_html(text: Any): ...
def serialize_html(node: Any): ...
def xml_translate(callback: Any, value: Any): ...
def html_translate(callback: Any, value: Any): ...
def translate(cr: Any, name: Any, source_type: Any, lang: Any, source: Optional[Any] = ...): ...
def translate_sql_constraint(cr: Any, key: Any, lang: Any): ...

class GettextAlias:
    def _get_db(self): ...
    def _get_cr(self, frame: Any, allow_create: bool = ...): ...
    def _get_uid(self, frame: Any): ...
    def _get_lang(self, frame: Any): ...
    def __call__(self, source: Any, *args: Any, **kwargs: Any): ...
    def _get_translation(self, source: Any): ...

class _lt:
    __slots__: Any = ...
    _source: Any = ...
    _args: Any = ...
    def __init__(self, source: Any, *args: Any, **kwargs: Any) -> None: ...
    def __str__(self): ...
    def __eq__(self, other: Any) -> Any: ...
    def __lt__(self, other: Any) -> Any: ...
    def __add__(self, other: Any): ...
    def __radd__(self, other: Any): ...

_: Any

def quote(s: Any): ...

re_escaped_char: Any
re_escaped_replacements: Any

def _sub_replacement(match_obj: Any): ...
def unquote(str: Any): ...
def TranslationFileReader(source: Any, fileformat: str = ...): ...

class CSVFileReader:
    source: Any = ...
    prev_code_src: str = ...
    def __init__(self, source: Any) -> None: ...
    def __iter__(self) -> Any: ...

class PoFileReader:
    pofile: Any = ...
    def __init__(self, source: Any): ...
    def __iter__(self) -> Any: ...

def TranslationFileWriter(target: Any, fileformat: str = ..., lang: Optional[Any] = ...): ...

class CSVFileWriter:
    writer: Any = ...
    def __init__(self, target: Any) -> None: ...
    def write_rows(self, rows: Any) -> None: ...

class PoFileWriter:
    buffer: Any = ...
    lang: Any = ...
    po: Any = ...
    def __init__(self, target: Any, lang: Any) -> None: ...
    def write_rows(self, rows: Any) -> None: ...
    def add_entry(self, modules: Any, tnrs: Any, source: Any, trad: Any, comments: Optional[Any] = ...) -> None: ...

class TarFileWriter:
    tar: Any = ...
    lang: Any = ...
    def __init__(self, target: Any, lang: Any) -> None: ...
    def write_rows(self, rows: Any) -> None: ...

def trans_export(lang: Any, modules: Any, buffer: Any, format: Any, cr: Any) -> None: ...
def trans_parse_rml(de: Any): ...
def _push(callback: Any, term: Any, source_line: Any) -> None: ...
def in_modules(object_name: Any, modules: Any): ...
def _extract_translatable_qweb_terms(element: Any, callback: Any) -> None: ...
def babel_extract_qweb(fileobj: Any, keywords: Any, comment_tags: Any, options: Any): ...

ImdInfo = namedtuple('ExternalId', ['name', 'model', 'res_id', 'module'])

class TranslationModuleReader:
    _cr: Any = ...
    _modules: Any = ...
    _lang: Any = ...
    env: Any = ...
    _to_translate: Any = ...
    _path_list: Any = ...
    _installed_modules: Any = ...
    def __init__(self, cr: Any, modules: Optional[Any] = ..., lang: Optional[Any] = ...) -> None: ...
    def __iter__(self) -> Any: ...
    def _push_translation(self, module: Any, ttype: Any, name: Any, res_id: Any, source: Any, comments: Optional[Any] = ..., record_id: Optional[Any] = ...) -> None: ...
    def _get_translatable_records(self, records: Any): ...
    def _export_translatable_records(self) -> None: ...
    def _get_module_from_path(self, path: Any): ...
    def _verified_module_filepaths(self, fname: Any, path: Any, root: Any): ...
    def _babel_extract_terms(self, fname: Any, path: Any, root: Any, extract_method: str = ..., trans_type: str = ..., extra_comments: Optional[Any] = ..., extract_keywords: Any = ...) -> None: ...
    def _export_translatable_resources(self) -> None: ...

def trans_load(cr: Any, filename: Any, lang: Any, verbose: bool = ..., create_empty_translation: bool = ..., overwrite: bool = ...): ...
def trans_load_data(cr: Any, fileobj: Any, fileformat: Any, lang: Any, verbose: bool = ..., create_empty_translation: bool = ..., overwrite: bool = ...) -> None: ...
def get_locales(lang: Optional[Any] = ...) -> None: ...
def resetlocale(): ...
def load_language(cr: Any, lang: Any) -> None: ...
