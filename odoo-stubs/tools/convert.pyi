from .misc import ustr as ustr
from odoo import api as api
from typing import Any, Optional

__all__: Any
_logger: Any
safe_eval: Any

class ParseError(Exception): ...

class RecordDictWrapper(dict):
    record: Any = ...
    def __init__(self, record: Any) -> None: ...
    def __getitem__(self, key: Any): ...

def _get_idref(self, env: Any, model_str: Any, idref: Any): ...
def _fix_multiple_roots(node: Any) -> None: ...
def _eval_xml(self, node: Any, env: Any): ...
def str2bool(value: Any): ...
def nodeattr2bool(node: Any, attr: Any, default: bool = ...): ...

class xml_import:
    def get_env(self, node: Any, eval_context: Optional[Any] = ...): ...
    def make_xml_id(self, xml_id: Any): ...
    def _test_xml_id(self, xml_id: Any) -> None: ...
    def _tag_delete(self, rec: Any) -> None: ...
    def _tag_report(self, rec: Any): ...
    def _tag_function(self, rec: Any) -> None: ...
    def _tag_act_window(self, rec: Any) -> None: ...
    def _tag_menuitem(self, rec: Any, parent: Optional[Any] = ...) -> None: ...
    def _tag_record(self, rec: Any): ...
    def _tag_template(self, el: Any): ...
    def id_get(self, id_str: Any, raise_if_not_found: bool = ...): ...
    def model_id_get(self, id_str: Any, raise_if_not_found: bool = ...): ...
    def _tag_root(self, el: Any) -> None: ...
    @property
    def env(self): ...
    @property
    def noupdate(self): ...
    mode: Any = ...
    module: Any = ...
    envs: Any = ...
    idref: Any = ...
    _noupdate: Any = ...
    xml_filename: Any = ...
    _tags: Any = ...
    def __init__(self, cr: Any, module: Any, idref: Any, mode: Any, noupdate: bool = ..., xml_filename: Optional[Any] = ...) -> None: ...
    def parse(self, de: Any) -> None: ...
    DATA_ROOTS: Any = ...

def convert_file(cr: Any, module: Any, filename: Any, idref: Any, mode: str = ..., noupdate: bool = ..., kind: Optional[Any] = ..., pathname: Optional[Any] = ...) -> None: ...
def convert_sql_import(cr: Any, fp: Any) -> None: ...
def convert_csv_import(cr: Any, module: Any, fname: Any, csvcontent: Any, idref: Optional[Any] = ..., mode: str = ..., noupdate: bool = ...) -> None: ...
def convert_xml_import(cr: Any, module: Any, xmlfile: Any, idref: Optional[Any] = ..., mode: str = ..., noupdate: bool = ..., report: Optional[Any] = ...) -> None: ...
